package Client

// ---------------

import LinkedList
import Debug

// ---------------

public abstract class ClientBound extends Debug

	private Client parent
	
	override function getName() returns string
		return "ClientBound"
		
	construct(Client parent)
		this.parent	= parent
		parent.bounds.add(this)
		
	ondestroy
		parent.bounds.remove(this)

// ---------------

public class Client extends Debug

	protected LinkedList<ClientBound> bounds
	static Client lcl
	player p
	private trigger dt
	
	override function getName() returns string
		return "Client"
		
	function print(string msg,real dur)
		printTimedToPlayer(msg,dur,p)
		
	construct(player p)
		this.p		= p
		this.bounds	= new LinkedList<ClientBound>
		this.dt		= CreateTrigger()
		dt.registerPlayerEvent(p,EVENT_PLAYER_LEAVE)
		dt.addCondition(Condition(function onClientLeave))
		
	ondestroy
		for ClientBound cb in bounds
			destroy cb
		destroy bounds
		dt.destr()

// ---------------

public LinkedList<Client> clients = new LinkedList<Client>
public function LinkedList<Client>.getFromPlayer(player p) returns Client
	for Client c in this
		if c.p==p
			return c
	return null

function onClientLeave() returns boolean
	let c=clients.getFromPlayer(GetTriggerPlayer())
	Client.lcl.print(c.p.getNameColored()+" has left the game",15)
	clients.remove(c)
	destroy c
	return false

// ---------------

init
	setDebugLvl(0)
	

	let lcl=GetLocalPlayer()
	for int i=0 to 11
		wantDebug[i]=true
		let p=Player(i)
		
		if	p.getController()==MAP_CONTROL_USER
			and p.getSlotState()==PLAYER_SLOT_STATE_PLAYING
			
			clients.addtoStart(new Client(p))
			if p==lcl
				Client.lcl=clients.get(0)
	
	Client.lcl.print("Welcome to |cffffaa00Dark of the Night|r, "+Client.lcl.p.getNameColored()+"!\n|cffaa55ff    Setting things up...",10)