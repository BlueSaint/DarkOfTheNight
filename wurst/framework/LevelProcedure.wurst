package LevelProcedure

/*	this is the most important part of
	the framework; the level procedure	*/

import Level
import LevelRoll
import Client
import Escaper
import LevelWaker
import EscaperObj
import EscaperPickerObj

// ---------------

interface ContinueFunc
	function run() returns Level

constant ContinueFunc continueWanted	= ()->LevelRoll.continueWanted()
constant ContinueFunc continueRest		= ()->LevelRoll.continueRest()

ContinueFunc currentContinueFunc

// ---------------

Level level		= null
int levelcount	= 0
function continueLevelProcedure()
	level		= currentContinueFunc.run()
	levelcount++
	if level==null
		if currentContinueFunc==continueWanted
			currentContinueFunc=continueRest
			continueLevelProcedure()
		else
			Client.lcl.print("|cffffff00The level pool is empty",60)
		return
	level.wake()
	for e in escapers
		if e.exists()
			e.u.setPos(level.getSpawnPos(e.owner()))
		else
			e.picker	= new EscaperPicker(e.owner().p,level.getSpawnPos(e.owner()))
			e.u			= e.picker.u
	PanCameraToTimed(level.start.x,level.start.y,0)
	Client.lcl.print("Level |cffffaa00#"+levelcount.toString(),25)

// ---------------

function Client.doPick(EscaperObj obj)
	if this.isLocal()
		Client.lcl.print("You have picked "+obj.getStr(),20)
	else
		Client.lcl.print(this.p.getNameColored()+" has picked "+obj.getStr(),20)
	this.escaper().u	= createUnit(this.p,obj.id,level.getSpawnPos(this),angle(270))
	this.p.select(this.escaper().u)
	this.escaper().picker	= null

// ---------------

public function startLevelProcedure()
	evClientPick.register((Client c,int data)->begin
		c.doPick(data castTo EscaperObj)
	end)
	currentContinueFunc		= continueWanted
	continueLevelProcedure()