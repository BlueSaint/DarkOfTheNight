package Client

// ---------------

import Listenable
import LinkedList

// ---------------

/** client means human player */
public class Client extends Listenable

	angle spawnAngle

	/** local client 
	obvious desync warning */
	static Client lcl
	function isLocal() returns boolean
		return this==lcl
	
	/** player handle */
	player p
	
	private trigger dt
	
	/** prints a message for the client to see */	
	function print(string msg,real dur)
		printTimedToPlayer(msg,dur,p)
	
	construct(player p)
		this.p		= p
		this.dt		= CreateTrigger()
		dt.registerPlayerEvent(p,EVENT_PLAYER_LEAVE)
		dt.addCondition(Condition(function onClientLeave))
		
	ondestroy
		clients.remove(this)
		dt.destr()

// ---------------

/** sets the spawnAngle for each Client */
function calcSpawnAngles()
	let count	= clients.getSize().toReal()
	real index	= 0
	for c in clients
		index++
		c.spawnAngle	= angle(PI2*count/index)

public constant LinkedList<Client> clients = new LinkedList<Client>
	
public function player.toClient() returns Client
	for c in clients
		if c.p==this
			return c
	return null

function onClientLeave() returns boolean
	let c=GetTriggerPlayer().toClient()
	Client.lcl.print(c.p.getNameColored()+" has left the game",15)
	destroy c
	calcSpawnAngles()
	return false

// ---------------

init
	let lcl=GetLocalPlayer()
	for i=0 to 11
		let p=Player(i)
		
		if	p.getController()==MAP_CONTROL_USER
			and p.getSlotState()==PLAYER_SLOT_STATE_PLAYING
			
			clients.add(new Client(p))
			if p==lcl
				Client.lcl=clients.get(0)
	calcSpawnAngles()
