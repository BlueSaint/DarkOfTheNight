package LevelConstructor

// ---------------

import Levels
import Stack
import ClosureForGroups
import UnitID

// ---------------

/** UID_LEVEL_MIDPOS:s are stored like this */
class Position
	real x
	real y
	construct(vec2 source)
		this.x	= source.x
		this.y	= source.y
	function vec() returns vec2
		return vec2(x,y)

/** gives level with pos,size and actors configured */
public abstract class LevelConstructor

	/** temporary rect used by LevelConstructor */
	private static rect tempR
	
	/** UID_LEVEL_MIDPOS:s are stored into these */
	private static Stack<Position> array lvlMids
	
	/** the area inside which we look for UID_LEVEL_CORNER:s */
	private static function map() returns rect
		return bj_mapInitialPlayableArea

	/** finds level of given type
	peasants = start pos
	footmen = corners
	rest are actors */
	static function get(int t) returns Level
		if lvlMids[t].getSize()==0
			return null
		
		let pos			= lvlMids[t].pop()
		let toprightres	= findCorner(pos.vec(),map().getRightTop())
		let botleftres	= findCorner(pos.vec(),map().getLeftBot())
		
		if toprightres==null or botleftres==null
			error("Please place 2 footmans to indicate level corners")		
		
		Level level		= new Level
		level.pos		= botleftres.getPos()
		level.size		= toprightres.getPos() - level.pos
		
		toprightres.remove()
		botleftres.remove()
		
		SetRect(tempR,level.pos.x,level.pos.y,level.maxPos().x,level.maxPos().y)
		level.actors	= CreateGroup()
		GroupEnumUnitsInRect(level.actors,tempR,null)
		for u in level.actors
			u.setOwner(Player(PLAYER_NEUTRAL_PASSIVE),false)
			u.addAbility(LOCUST_ID)	/* prevent being picked into groups */
			u.hide()				/* don't draw model */
			u.pause()				/* save CPU */
		
		return level
		
	/** find closest corner indicator given two vecs */
	private static function findCorner(vec2 minpos,vec2 maxpos) returns unit
		 SetRect(tempR,minpos.x,minpos.y,maxpos.x,maxpos.y)
		 real mindist	= 999999
		 unit result	= null
		 forUnitsInRect(tempR,(unit u) -> begin
		 	if u.getTypeId()==UID_LEVEL_CORNER
			 	let dist	= u.getPos().distToVec(minpos)
			 	if dist<mindist
					mindist	= dist
					result	= u
		 end)
		 return result
		
	/** free memory (disables levelconstructor)
	not using all the data before this is considered an error */
	static function cleanUp()
		for i=0 to llCount-1
			if lvlMids[i].getSize()>0
				error(lvlMids[i].getSize().toString()+" peasant(s) were left unregistered")
			destroy lvlMids[i]
		RemoveRect(tempR)

	/** initialize levelconstructor */
	static function doInit()
		tempR	= Rect(0,0,0,0)
		for i=0 to llCount-1
			lvlMids[i]	= new Stack<Position>
		forUnitsInRect(bj_mapInitialPlayableArea,(unit u) -> begin
			if u.getTypeId()==UID_LEVEL_MIDPOS
				let i = u.getOwner().getId()
				if i>=llCount
					error("Peasant owner id is too high: "+i.toString())
				lvlMids[i].push(new Position(u.getPos()))
				u.remove()
		end)
